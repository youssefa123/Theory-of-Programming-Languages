/*Youssef Abdelhady 
/ Theory Of Programming Languages 
*/

object CeaserCipher extends App {
    // Main Function in Scala


val alphabet = "ABCDEFGHIJKLMOPQRSTUVWXYZ"

val shift = (scala.io.StdIn.readLine("Shift By: ").toInt + alphabet.size) % alphabet.size
/*his expression likely implements a modular arithmetic operation that maps a shift amount to its equivalent value within the size of the alphabet*/
val inputString = scala.io.StdIn.readLine("Cipher:")

val outputString = inputString.map( (c: Char) => {
    val x = alphabet.indexOf(c.toUpper)

		//If the c char is in our alphabet then we encrypt it 
		//If it is not then we leave it be.
		if (x == -1){
			c
		}
		else{
			alphabet((x + shift) % alphabet.size)
			} 
	});

	//Print the result
	println(outputString);


}